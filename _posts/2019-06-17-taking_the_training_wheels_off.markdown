---
layout: post
title:      "Taking The Training Wheels Off"
date:       2019-06-17 18:07:58 +0000
permalink:  taking_the_training_wheels_off
---

Learning how to ride a bike is difficult. Almost everybody starts with training wheels before they learn to zoom through the streets on their shiny two-wheeler. You need to get a feel for the bike, to experience what it feels like to be riding something for the first time. It's both thrilling in that you're moving somewhere without having your own two feet hit the pavement, yet muted, as you know that if you sway too much to the right or to the left, if you mess up, the training wheels will be there to catch you. But as you gain a little experience and you feel like you can keep the bike fairly centered, the next objective is to take the training wheels off. And it's a completely different experience. Now, you need to be your own training wheels. You sway too far to the right, swing left and center yourself! You sway too far to the left, swing right, swing right! But not too much! Ah, you're too far right, swing left! But again, not too much! Not too much! You probably only go a couple of feet before you crash and fall, but hey, hopefully you wore some kneepads and a helmet. You're going to need them. It's going to take some time before you're cruising down the street, and even more time to get a little fancy like the cool kids riding their bikes with no hands on the handlebars. You know it'll take time, patience, and repetition. And you're determined you'll get there. But you also know that it means putting in hours and hours of hard work, that it probably won't come to you immediately. 

Such is the life of coding, and such is my experience with the first CLI Gem project. 

From Bootcamp Prep to the first 3 weeks of actual online Bootcamp, we're graciously, and practically, given training wheels. 'Read-me's to tell us, "Hey, for this function make sure you're instantiating with this," or "Get this function to output this, hint hint: write this." And yes, with every lab, of course we need to still think critically and solve problems applying previous lessons and the like. But this project is the very first time we are told, "These are the guidelines. Of course we are here to help you throughout your project, but for the most part, use the given resources and write your own classes, functions, files, directories, everything. Build." The training wheels are off, and it's time for us lock in our helmet, roll up our kneepads, and ride that two-wheeler, a couple messy feet at a time. That aptly describes my experience with this CLI Gem. It felt like riding a two-wheeler for the first time, wobbly bike and all. Swerving left and right for a few feet, crashing, feeling defeated for the moment, and getting back on to go a couple more feet. 15 tabs open on Google Chrome, past labs and videos to reinforce concepts, hoping that one of these tabs had the answer for what the heck this function was supposed to look like, or why exactly I'm writing what I'm writing. I noticed that it rarely ever feels like it in the moment, but with every Google search, every time I visited a past lab or video, I was learning. And concepts that felt like I had a 60% understanding of, grew to 70%, then 80%. And after hours and hours of going through the vicious cycle of writing code, hoping for no errors, most definitely getting an error, and googling, I had found myself at the end of the block. I rode down the whole block. I did it. It wasn't pretty, and if a fly on the wall had been documenting my entire process to get to this place, it would've probably died of boredom and frustration, watching me mess up, fix it, and mess up again for days on end. 

My project was originally a gem to scrape shoes and brands off of a buy/sell market for sneakers. I was making progress, slowly but surely, and was feeling good about how far I'd come. I felt like I was finally seeing concepts in a new light, having to code certain things myself, instead of following specific instructions. I had scraped sneakers off each webpage, instantiated new Sneaker objects, iterated over each, had my Sneakers "speak" to specific Brands, and I felt like I was nearly finished with my project. But near the last day of working on my project, I ran into a forbidden 403 error. A quick google search showed me that that webpage didn't quite like me scraping data off of it, and had banned me from doing so any further. Awesome. After taking a day to mope and question my existence (dramatic, I know), I got right back to work with a different project.

My final project is a scraper for IMDB, showing the top-grossing movies playing currently, and showing specific details for each movie chosen by the user. I'm proud of it, and while I'm tempted to dwell on my lost project that I had spent about a full week on, I know I wouldn't have been able to build out my current project as quickly as I did, if I had not spent all that time on my original. I learned. I feel like I can confidently say I know what each line of my code is doing, and I have such a fuller grasp of OO Ruby and scraping presently.

While learning how to ride a bike, you're going to fall. A lot. And you might even have a really bad fall or two, leaving you bruised and feeling defeated. But the number of falls, nor a particularly bad fall, does not discount the progress you've made. The hours, the hard work, the patience, and the grueling process of taking the training wheels off for the first time have not been in vain. You didn't give up, and that's ultimately what matters. And now, look at you. You made your first app. The first of many. It was all worth it. 
